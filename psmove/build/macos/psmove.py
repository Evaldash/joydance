# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _psmove
else:
    import _psmove

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def cdata(ptr, nelements=1):
    return _psmove.cdata(ptr, nelements)

def memmove(data, indata):
    return _psmove.memmove(data, indata)
PSMOVEAPI_VERSION_MAJOR = _psmove.PSMOVEAPI_VERSION_MAJOR
PSMOVEAPI_VERSION_MINOR = _psmove.PSMOVEAPI_VERSION_MINOR
PSMOVEAPI_VERSION_PATCH = _psmove.PSMOVEAPI_VERSION_PATCH
Model_Unknown = _psmove.Model_Unknown
Model_ZCM1 = _psmove.Model_ZCM1
Model_ZCM2 = _psmove.Model_ZCM2
Model_Count = _psmove.Model_Count
Conn_Bluetooth = _psmove.Conn_Bluetooth
Conn_USB = _psmove.Conn_USB
Conn_Unknown = _psmove.Conn_Unknown
Btn_TRIANGLE = _psmove.Btn_TRIANGLE
Btn_CIRCLE = _psmove.Btn_CIRCLE
Btn_CROSS = _psmove.Btn_CROSS
Btn_SQUARE = _psmove.Btn_SQUARE
Btn_SELECT = _psmove.Btn_SELECT
Btn_START = _psmove.Btn_START
Btn_PS = _psmove.Btn_PS
Btn_MOVE = _psmove.Btn_MOVE
Btn_T = _psmove.Btn_T
NavBtn_CROSS = _psmove.NavBtn_CROSS
NavBtn_CIRCLE = _psmove.NavBtn_CIRCLE
NavBtn_L1 = _psmove.NavBtn_L1
NavBtn_L2 = _psmove.NavBtn_L2
NavBtn_L3 = _psmove.NavBtn_L3
NavBtn_PS = _psmove.NavBtn_PS
NavBtn_UP = _psmove.NavBtn_UP
NavBtn_DOWN = _psmove.NavBtn_DOWN
NavBtn_LEFT = _psmove.NavBtn_LEFT
NavBtn_RIGHT = _psmove.NavBtn_RIGHT
NavAxis_X = _psmove.NavAxis_X
NavAxis_Y = _psmove.NavAxis_Y
NavAxis_Trigger = _psmove.NavAxis_Trigger
Frame_FirstHalf = _psmove.Frame_FirstHalf
Frame_SecondHalf = _psmove.Frame_SecondHalf
Batt_MIN = _psmove.Batt_MIN
Batt_20Percent = _psmove.Batt_20Percent
Batt_40Percent = _psmove.Batt_40Percent
Batt_60Percent = _psmove.Batt_60Percent
Batt_80Percent = _psmove.Batt_80Percent
Batt_MAX = _psmove.Batt_MAX
Batt_CHARGING = _psmove.Batt_CHARGING
Batt_CHARGING_DONE = _psmove.Batt_CHARGING_DONE
Update_Failed = _psmove.Update_Failed
Update_Success = _psmove.Update_Success
Update_Ignored = _psmove.Update_Ignored
PSMove_False = _psmove.PSMove_False
PSMove_True = _psmove.PSMove_True
PSMove_LocalAndRemote = _psmove.PSMove_LocalAndRemote
PSMove_OnlyLocal = _psmove.PSMove_OnlyLocal
PSMove_OnlyRemote = _psmove.PSMove_OnlyRemote
OrientationFusion_None = _psmove.OrientationFusion_None
OrientationFusion_MadgwickIMU = _psmove.OrientationFusion_MadgwickIMU
OrientationFusion_MadgwickMARG = _psmove.OrientationFusion_MadgwickMARG
OrientationFusion_ComplementaryMARG = _psmove.OrientationFusion_ComplementaryMARG
CalibrationPose_Upright = _psmove.CalibrationPose_Upright
CalibrationPose_LyingFlat = _psmove.CalibrationPose_LyingFlat
SensorDataBasis_Native = _psmove.SensorDataBasis_Native
SensorDataBasis_OpenGL = _psmove.SensorDataBasis_OpenGL
PSMOVE_EXT_DATA_BUF_SIZE = _psmove.PSMOVE_EXT_DATA_BUF_SIZE
class PSMove_Ext_Device_Info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dev_id = property(_psmove.PSMove_Ext_Device_Info_dev_id_get, _psmove.PSMove_Ext_Device_Info_dev_id_set)
    dev_info = property(_psmove.PSMove_Ext_Device_Info_dev_info_get, _psmove.PSMove_Ext_Device_Info_dev_info_set)

    def __init__(self):
        _psmove.PSMove_Ext_Device_Info_swiginit(self, _psmove.new_PSMove_Ext_Device_Info())
    __swig_destroy__ = _psmove.delete_PSMove_Ext_Device_Info

# Register PSMove_Ext_Device_Info in _psmove:
_psmove.PSMove_Ext_Device_Info_swigregister(PSMove_Ext_Device_Info)

class _PSMove_3AxisVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_psmove._PSMove_3AxisVector_x_get, _psmove._PSMove_3AxisVector_x_set)
    y = property(_psmove._PSMove_3AxisVector_y_get, _psmove._PSMove_3AxisVector_y_set)
    z = property(_psmove._PSMove_3AxisVector_z_get, _psmove._PSMove_3AxisVector_z_set)
    v = property(_psmove._PSMove_3AxisVector_v_get, _psmove._PSMove_3AxisVector_v_set)

    def __init__(self):
        _psmove._PSMove_3AxisVector_swiginit(self, _psmove.new__PSMove_3AxisVector())
    __swig_destroy__ = _psmove.delete__PSMove_3AxisVector

# Register _PSMove_3AxisVector in _psmove:
_psmove._PSMove_3AxisVector_swigregister(_PSMove_3AxisVector)

class _PSMove_3AxisTransform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row0 = property(_psmove._PSMove_3AxisTransform_row0_get, _psmove._PSMove_3AxisTransform_row0_set)
    row1 = property(_psmove._PSMove_3AxisTransform_row1_get, _psmove._PSMove_3AxisTransform_row1_set)
    row2 = property(_psmove._PSMove_3AxisTransform_row2_get, _psmove._PSMove_3AxisTransform_row2_set)
    m = property(_psmove._PSMove_3AxisTransform_m_get, _psmove._PSMove_3AxisTransform_m_set)

    def __init__(self):
        _psmove._PSMove_3AxisTransform_swiginit(self, _psmove.new__PSMove_3AxisTransform())
    __swig_destroy__ = _psmove.delete__PSMove_3AxisTransform

# Register _PSMove_3AxisTransform in _psmove:
_psmove._PSMove_3AxisTransform_swigregister(_PSMove_3AxisTransform)

PSMOVE_CURRENT_VERSION = _psmove.PSMOVE_CURRENT_VERSION

def psmove_init(version):
    return _psmove.psmove_init(version)

def psmove_set_remote_config(config):
    return _psmove.psmove_set_remote_config(config)

def psmove_count_connected():
    return _psmove.psmove_count_connected()

def psmove_connect():
    return _psmove.psmove_connect()

def psmove_connect_by_id(id):
    return _psmove.psmove_connect_by_id(id)

def psmove_connection_type(move):
    return _psmove.psmove_connection_type(move)

def psmove_is_remote(move):
    return _psmove.psmove_is_remote(move)

def psmove_get_serial(move):
    return _psmove.psmove_get_serial(move)

def psmove_get_model(move):
    return _psmove.psmove_get_model(move)

def psmove_pair(move):
    return _psmove.psmove_pair(move)

def psmove_host_pair_custom(addr):
    return _psmove.psmove_host_pair_custom(addr)

def psmove_host_pair_custom_model(addr, model):
    return _psmove.psmove_host_pair_custom_model(addr, model)

def psmove_pair_custom(move, new_host_string):
    return _psmove.psmove_pair_custom(move, new_host_string)

def psmove_set_rate_limiting(move, enabled):
    return _psmove.psmove_set_rate_limiting(move, enabled)

def psmove_set_leds(move, r, g, b):
    return _psmove.psmove_set_leds(move, r, g, b)

def psmove_set_led_pwm_frequency(move, freq):
    return _psmove.psmove_set_led_pwm_frequency(move, freq)

def psmove_set_rumble(move, rumble):
    return _psmove.psmove_set_rumble(move, rumble)

def psmove_update_leds(move):
    return _psmove.psmove_update_leds(move)

def psmove_poll(move):
    return _psmove.psmove_poll(move)

def psmove_get_ext_data(move, data):
    return _psmove.psmove_get_ext_data(move, data)

def psmove_send_ext_data(move, data, length):
    return _psmove.psmove_send_ext_data(move, data, length)

def psmove_get_buttons(move):
    return _psmove.psmove_get_buttons(move)

def psmove_get_button_events(move, pressed, released):
    return _psmove.psmove_get_button_events(move, pressed, released)

def psmove_is_ext_connected(move):
    return _psmove.psmove_is_ext_connected(move)

def psmove_get_ext_device_info(move, info):
    return _psmove.psmove_get_ext_device_info(move, info)

def psmove_get_battery(move):
    return _psmove.psmove_get_battery(move)

def psmove_get_temperature(move):
    return _psmove.psmove_get_temperature(move)

def psmove_get_temperature_in_celsius(move):
    return _psmove.psmove_get_temperature_in_celsius(move)

def psmove_get_trigger(move):
    return _psmove.psmove_get_trigger(move)

def psmove_get_accelerometer(move, ax, ay, az):
    return _psmove.psmove_get_accelerometer(move, ax, ay, az)

def psmove_get_gyroscope(move, gx, gy, gz):
    return _psmove.psmove_get_gyroscope(move, gx, gy, gz)

def psmove_get_magnetometer(move, mx, my, mz):
    return _psmove.psmove_get_magnetometer(move, mx, my, mz)

def psmove_get_accelerometer_frame(move, frame, ax, ay, az):
    return _psmove.psmove_get_accelerometer_frame(move, frame, ax, ay, az)

def psmove_get_gyroscope_frame(move, frame, gx, gy, gz):
    return _psmove.psmove_get_gyroscope_frame(move, frame, gx, gy, gz)

def psmove_get_magnetometer_vector(move, mx, my, mz):
    return _psmove.psmove_get_magnetometer_vector(move, mx, my, mz)

def psmove_get_magnetometer_3axisvector(move, out_m):
    return _psmove.psmove_get_magnetometer_3axisvector(move, out_m)

def psmove_reset_magnetometer_calibration(move):
    return _psmove.psmove_reset_magnetometer_calibration(move)

def psmove_save_magnetometer_calibration(move):
    return _psmove.psmove_save_magnetometer_calibration(move)

def psmove_get_magnetometer_calibration_range(move):
    return _psmove.psmove_get_magnetometer_calibration_range(move)

def psmove_has_calibration(move):
    return _psmove.psmove_has_calibration(move)

def psmove_dump_calibration(move):
    return _psmove.psmove_dump_calibration(move)

def psmove_enable_orientation(move, enabled):
    return _psmove.psmove_enable_orientation(move, enabled)

def psmove_has_orientation(move):
    return _psmove.psmove_has_orientation(move)

def psmove_get_orientation(move, w, x, y, z):
    return _psmove.psmove_get_orientation(move, w, x, y, z)

def psmove_reset_orientation(move):
    return _psmove.psmove_reset_orientation(move)

def psmove_set_orientation_fusion_type(move, fusion_type):
    return _psmove.psmove_set_orientation_fusion_type(move, fusion_type)

def psmove_set_calibration_pose(move, calibration_pose):
    return _psmove.psmove_set_calibration_pose(move, calibration_pose)

def psmove_set_calibration_transform(move, transform):
    return _psmove.psmove_set_calibration_transform(move, transform)

def psmove_get_identity_gravity_calibration_direction(move, out_a):
    return _psmove.psmove_get_identity_gravity_calibration_direction(move, out_a)

def psmove_get_transformed_gravity_calibration_direction(move, out_a):
    return _psmove.psmove_get_transformed_gravity_calibration_direction(move, out_a)

def psmove_get_identity_magnetometer_calibration_direction(move, out_m):
    return _psmove.psmove_get_identity_magnetometer_calibration_direction(move, out_m)

def psmove_get_transformed_magnetometer_calibration_direction(move, out_m):
    return _psmove.psmove_get_transformed_magnetometer_calibration_direction(move, out_m)

def psmove_set_magnetometer_calibration_direction(move, m):
    return _psmove.psmove_set_magnetometer_calibration_direction(move, m)

def psmove_set_sensor_data_basis(move, basis_type):
    return _psmove.psmove_set_sensor_data_basis(move, basis_type)

def psmove_set_sensor_data_transform(move, transform):
    return _psmove.psmove_set_sensor_data_transform(move, transform)

def psmove_get_transformed_magnetometer_direction(move, out_m):
    return _psmove.psmove_get_transformed_magnetometer_direction(move, out_m)

def psmove_get_transformed_accelerometer_frame_3axisvector(move, frame, out_a):
    return _psmove.psmove_get_transformed_accelerometer_frame_3axisvector(move, frame, out_a)

def psmove_get_transformed_accelerometer_frame_direction(move, frame, out_a):
    return _psmove.psmove_get_transformed_accelerometer_frame_direction(move, frame, out_a)

def psmove_get_transformed_gyroscope_frame_3axisvector(move, frame, out_w):
    return _psmove.psmove_get_transformed_gyroscope_frame_3axisvector(move, frame, out_w)

def psmove_disconnect(move):
    return _psmove.psmove_disconnect(move)

def psmove_reinit():
    return _psmove.psmove_reinit()

def psmove_util_get_ticks():
    return _psmove.psmove_util_get_ticks()

def psmove_util_get_data_dir():
    return _psmove.psmove_util_get_data_dir()

def psmove_util_get_file_path(filename):
    return _psmove.psmove_util_get_file_path(filename)

def psmove_util_get_system_file_path(filename):
    return _psmove.psmove_util_get_system_file_path(filename)

def psmove_util_get_env_int(name):
    return _psmove.psmove_util_get_env_int(name)

def psmove_util_get_env_string(name):
    return _psmove.psmove_util_get_env_string(name)

def psmove_util_sleep_ms(ms):
    return _psmove.psmove_util_sleep_ms(ms)

def psmove_free_mem(buf):
    return _psmove.psmove_free_mem(buf)
class PSMove(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    connection_type = property(_psmove.PSMove_connection_type_get)
    ax = property(_psmove.PSMove_ax_get)
    ay = property(_psmove.PSMove_ay_get)
    az = property(_psmove.PSMove_az_get)
    gx = property(_psmove.PSMove_gx_get)
    gy = property(_psmove.PSMove_gy_get)
    gz = property(_psmove.PSMove_gz_get)
    mx = property(_psmove.PSMove_mx_get)
    my = property(_psmove.PSMove_my_get)
    mz = property(_psmove.PSMove_mz_get)

    def __init__(self, *args):
        _psmove.PSMove_swiginit(self, _psmove.new_PSMove(*args))

    def get_accelerometer_frame(self, frame):
        return _psmove.PSMove_get_accelerometer_frame(self, frame)

    def get_gyroscope_frame(self, frame):
        return _psmove.PSMove_get_gyroscope_frame(self, frame)

    def get_magnetometer_vector(self):
        return _psmove.PSMove_get_magnetometer_vector(self)

    def enable_orientation(self, enabled):
        return _psmove.PSMove_enable_orientation(self, enabled)

    def has_orientation(self):
        return _psmove.PSMove_has_orientation(self)

    def has_calibration(self):
        return _psmove.PSMove_has_calibration(self)

    def get_orientation(self):
        return _psmove.PSMove_get_orientation(self)

    def reset_orientation(self):
        return _psmove.PSMove_reset_orientation(self)

    def set_leds(self, r, g, b):
        return _psmove.PSMove_set_leds(self, r, g, b)

    def set_rumble(self, rumble):
        return _psmove.PSMove_set_rumble(self, rumble)

    def update_leds(self):
        return _psmove.PSMove_update_leds(self)

    def set_rate_limiting(self, enabled):
        return _psmove.PSMove_set_rate_limiting(self, enabled)

    def pair(self):
        return _psmove.PSMove_pair(self)

    def pair_custom(self, btaddr):
        return _psmove.PSMove_pair_custom(self, btaddr)

    def get_serial(self):
        return _psmove.PSMove_get_serial(self)

    def is_remote(self):
        return _psmove.PSMove_is_remote(self)

    def poll(self):
        return _psmove.PSMove_poll(self)

    def get_buttons(self):
        return _psmove.PSMove_get_buttons(self)

    def get_button_events(self):
        return _psmove.PSMove_get_button_events(self)

    def get_battery(self):
        return _psmove.PSMove_get_battery(self)

    def get_temperature(self):
        return _psmove.PSMove_get_temperature(self)

    def get_temperature_in_celsius(self):
        return _psmove.PSMove_get_temperature_in_celsius(self)

    def get_trigger(self):
        return _psmove.PSMove_get_trigger(self)
    __swig_destroy__ = _psmove.delete_PSMove

# Register PSMove in _psmove:
_psmove.PSMove_swigregister(PSMove)

PSMOVE_TRACKER_DEFAULT_WIDTH = _psmove.PSMOVE_TRACKER_DEFAULT_WIDTH
PSMOVE_TRACKER_DEFAULT_HEIGHT = _psmove.PSMOVE_TRACKER_DEFAULT_HEIGHT
PSMOVE_TRACKER_DEFAULT_FPS = _psmove.PSMOVE_TRACKER_DEFAULT_FPS
PSMOVE_TRACKER_MAX_CONTROLLERS = _psmove.PSMOVE_TRACKER_MAX_CONTROLLERS
PSMOVE_TRACKER_CAMERA_ENV = _psmove.PSMOVE_TRACKER_CAMERA_ENV
PSMOVE_TRACKER_FILENAME_ENV = _psmove.PSMOVE_TRACKER_FILENAME_ENV
PSMOVE_TRACKER_ROI_SIZE_ENV = _psmove.PSMOVE_TRACKER_ROI_SIZE_ENV
PSMOVE_TRACKER_COLOR_ENV = _psmove.PSMOVE_TRACKER_COLOR_ENV
PSMOVE_TRACKER_WIDTH_ENV = _psmove.PSMOVE_TRACKER_WIDTH_ENV
PSMOVE_TRACKER_HEIGHT_ENV = _psmove.PSMOVE_TRACKER_HEIGHT_ENV
class PSMoveTrackerRGBImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_psmove.PSMoveTrackerRGBImage_data_get, _psmove.PSMoveTrackerRGBImage_data_set)
    width = property(_psmove.PSMoveTrackerRGBImage_width_get, _psmove.PSMoveTrackerRGBImage_width_set)
    height = property(_psmove.PSMoveTrackerRGBImage_height_get, _psmove.PSMoveTrackerRGBImage_height_set)
    size = property(_psmove.PSMoveTrackerRGBImage_size_get)

    def __init__(self):
        _psmove.PSMoveTrackerRGBImage_swiginit(self, _psmove.new_PSMoveTrackerRGBImage())
    __swig_destroy__ = _psmove.delete_PSMoveTrackerRGBImage

# Register PSMoveTrackerRGBImage in _psmove:
_psmove.PSMoveTrackerRGBImage_swigregister(PSMoveTrackerRGBImage)

Tracker_NOT_CALIBRATED = _psmove.Tracker_NOT_CALIBRATED
Tracker_CALIBRATION_ERROR = _psmove.Tracker_CALIBRATION_ERROR
Tracker_CALIBRATED = _psmove.Tracker_CALIBRATED
Tracker_TRACKING = _psmove.Tracker_TRACKING
Exposure_LOW = _psmove.Exposure_LOW
Exposure_MEDIUM = _psmove.Exposure_MEDIUM
Exposure_HIGH = _psmove.Exposure_HIGH
Exposure_INVALID = _psmove.Exposure_INVALID
class PSMoveTrackerSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    camera_frame_width = property(_psmove.PSMoveTrackerSettings_camera_frame_width_get, _psmove.PSMoveTrackerSettings_camera_frame_width_set)
    camera_frame_height = property(_psmove.PSMoveTrackerSettings_camera_frame_height_get, _psmove.PSMoveTrackerSettings_camera_frame_height_set)
    camera_frame_rate = property(_psmove.PSMoveTrackerSettings_camera_frame_rate_get, _psmove.PSMoveTrackerSettings_camera_frame_rate_set)
    camera_auto_gain = property(_psmove.PSMoveTrackerSettings_camera_auto_gain_get, _psmove.PSMoveTrackerSettings_camera_auto_gain_set)
    camera_gain = property(_psmove.PSMoveTrackerSettings_camera_gain_get, _psmove.PSMoveTrackerSettings_camera_gain_set)
    camera_auto_white_balance = property(_psmove.PSMoveTrackerSettings_camera_auto_white_balance_get, _psmove.PSMoveTrackerSettings_camera_auto_white_balance_set)
    camera_exposure = property(_psmove.PSMoveTrackerSettings_camera_exposure_get, _psmove.PSMoveTrackerSettings_camera_exposure_set)
    camera_brightness = property(_psmove.PSMoveTrackerSettings_camera_brightness_get, _psmove.PSMoveTrackerSettings_camera_brightness_set)
    camera_mirror = property(_psmove.PSMoveTrackerSettings_camera_mirror_get, _psmove.PSMoveTrackerSettings_camera_mirror_set)
    exposure_mode = property(_psmove.PSMoveTrackerSettings_exposure_mode_get, _psmove.PSMoveTrackerSettings_exposure_mode_set)
    calibration_blink_delay = property(_psmove.PSMoveTrackerSettings_calibration_blink_delay_get, _psmove.PSMoveTrackerSettings_calibration_blink_delay_set)
    calibration_diff_t = property(_psmove.PSMoveTrackerSettings_calibration_diff_t_get, _psmove.PSMoveTrackerSettings_calibration_diff_t_set)
    calibration_min_size = property(_psmove.PSMoveTrackerSettings_calibration_min_size_get, _psmove.PSMoveTrackerSettings_calibration_min_size_set)
    calibration_max_distance = property(_psmove.PSMoveTrackerSettings_calibration_max_distance_get, _psmove.PSMoveTrackerSettings_calibration_max_distance_set)
    calibration_size_std = property(_psmove.PSMoveTrackerSettings_calibration_size_std_get, _psmove.PSMoveTrackerSettings_calibration_size_std_set)
    color_mapping_max_age = property(_psmove.PSMoveTrackerSettings_color_mapping_max_age_get, _psmove.PSMoveTrackerSettings_color_mapping_max_age_set)
    dimming_factor = property(_psmove.PSMoveTrackerSettings_dimming_factor_get, _psmove.PSMoveTrackerSettings_dimming_factor_set)
    color_hue_filter_range = property(_psmove.PSMoveTrackerSettings_color_hue_filter_range_get, _psmove.PSMoveTrackerSettings_color_hue_filter_range_set)
    color_saturation_filter_range = property(_psmove.PSMoveTrackerSettings_color_saturation_filter_range_get, _psmove.PSMoveTrackerSettings_color_saturation_filter_range_set)
    color_value_filter_range = property(_psmove.PSMoveTrackerSettings_color_value_filter_range_get, _psmove.PSMoveTrackerSettings_color_value_filter_range_set)
    tracker_adaptive_xy = property(_psmove.PSMoveTrackerSettings_tracker_adaptive_xy_get, _psmove.PSMoveTrackerSettings_tracker_adaptive_xy_set)
    tracker_adaptive_z = property(_psmove.PSMoveTrackerSettings_tracker_adaptive_z_get, _psmove.PSMoveTrackerSettings_tracker_adaptive_z_set)
    color_adaption_quality_t = property(_psmove.PSMoveTrackerSettings_color_adaption_quality_t_get, _psmove.PSMoveTrackerSettings_color_adaption_quality_t_set)
    color_update_rate = property(_psmove.PSMoveTrackerSettings_color_update_rate_get, _psmove.PSMoveTrackerSettings_color_update_rate_set)
    search_tile_width = property(_psmove.PSMoveTrackerSettings_search_tile_width_get, _psmove.PSMoveTrackerSettings_search_tile_width_set)
    search_tile_height = property(_psmove.PSMoveTrackerSettings_search_tile_height_get, _psmove.PSMoveTrackerSettings_search_tile_height_set)
    search_tiles_horizontal = property(_psmove.PSMoveTrackerSettings_search_tiles_horizontal_get, _psmove.PSMoveTrackerSettings_search_tiles_horizontal_set)
    search_tiles_count = property(_psmove.PSMoveTrackerSettings_search_tiles_count_get, _psmove.PSMoveTrackerSettings_search_tiles_count_set)
    roi_adjust_fps_t = property(_psmove.PSMoveTrackerSettings_roi_adjust_fps_t_get, _psmove.PSMoveTrackerSettings_roi_adjust_fps_t_set)
    tracker_quality_t1 = property(_psmove.PSMoveTrackerSettings_tracker_quality_t1_get, _psmove.PSMoveTrackerSettings_tracker_quality_t1_set)
    tracker_quality_t2 = property(_psmove.PSMoveTrackerSettings_tracker_quality_t2_get, _psmove.PSMoveTrackerSettings_tracker_quality_t2_set)
    tracker_quality_t3 = property(_psmove.PSMoveTrackerSettings_tracker_quality_t3_get, _psmove.PSMoveTrackerSettings_tracker_quality_t3_set)
    color_update_quality_t1 = property(_psmove.PSMoveTrackerSettings_color_update_quality_t1_get, _psmove.PSMoveTrackerSettings_color_update_quality_t1_set)
    color_update_quality_t2 = property(_psmove.PSMoveTrackerSettings_color_update_quality_t2_get, _psmove.PSMoveTrackerSettings_color_update_quality_t2_set)
    color_update_quality_t3 = property(_psmove.PSMoveTrackerSettings_color_update_quality_t3_get, _psmove.PSMoveTrackerSettings_color_update_quality_t3_set)
    intrinsics_xml = property(_psmove.PSMoveTrackerSettings_intrinsics_xml_get, _psmove.PSMoveTrackerSettings_intrinsics_xml_set)
    distortion_xml = property(_psmove.PSMoveTrackerSettings_distortion_xml_get, _psmove.PSMoveTrackerSettings_distortion_xml_set)

    def __init__(self):
        _psmove.PSMoveTrackerSettings_swiginit(self, _psmove.new_PSMoveTrackerSettings())
    __swig_destroy__ = _psmove.delete_PSMoveTrackerSettings

# Register PSMoveTrackerSettings in _psmove:
_psmove.PSMoveTrackerSettings_swigregister(PSMoveTrackerSettings)


def psmove_tracker_settings_set_default(settings):
    return _psmove.psmove_tracker_settings_set_default(settings)

def psmove_tracker_new():
    return _psmove.psmove_tracker_new()

def psmove_tracker_new_with_settings(settings):
    return _psmove.psmove_tracker_new_with_settings(settings)

def psmove_tracker_new_with_camera(camera):
    return _psmove.psmove_tracker_new_with_camera(camera)

def psmove_tracker_new_with_camera_and_settings(camera, settings):
    return _psmove.psmove_tracker_new_with_camera_and_settings(camera, settings)

def psmove_tracker_count_connected():
    return _psmove.psmove_tracker_count_connected()

def psmove_tracker_set_auto_update_leds(tracker, move, auto_update_leds):
    return _psmove.psmove_tracker_set_auto_update_leds(tracker, move, auto_update_leds)

def psmove_tracker_get_auto_update_leds(tracker, move):
    return _psmove.psmove_tracker_get_auto_update_leds(tracker, move)

def psmove_tracker_set_dimming(tracker, dimming):
    return _psmove.psmove_tracker_set_dimming(tracker, dimming)

def psmove_tracker_get_dimming(tracker):
    return _psmove.psmove_tracker_get_dimming(tracker)

def psmove_tracker_set_exposure(tracker, exposure):
    return _psmove.psmove_tracker_set_exposure(tracker, exposure)

def psmove_tracker_get_exposure(tracker):
    return _psmove.psmove_tracker_get_exposure(tracker)

def psmove_tracker_enable_deinterlace(tracker, enabled):
    return _psmove.psmove_tracker_enable_deinterlace(tracker, enabled)

def psmove_tracker_set_mirror(tracker, enabled):
    return _psmove.psmove_tracker_set_mirror(tracker, enabled)

def psmove_tracker_get_mirror(tracker):
    return _psmove.psmove_tracker_get_mirror(tracker)

def psmove_tracker_enable(tracker, move):
    return _psmove.psmove_tracker_enable(tracker, move)

def psmove_tracker_enable_with_color(tracker, move, r, g, b):
    return _psmove.psmove_tracker_enable_with_color(tracker, move, r, g, b)

def psmove_tracker_disable(tracker, move):
    return _psmove.psmove_tracker_disable(tracker, move)

def psmove_tracker_get_color(tracker, move, r, g, b):
    return _psmove.psmove_tracker_get_color(tracker, move, r, g, b)

def psmove_tracker_get_camera_color(tracker, move, r, g, b):
    return _psmove.psmove_tracker_get_camera_color(tracker, move, r, g, b)

def psmove_tracker_set_camera_color(tracker, move, r, g, b):
    return _psmove.psmove_tracker_set_camera_color(tracker, move, r, g, b)

def psmove_tracker_get_status(tracker, move):
    return _psmove.psmove_tracker_get_status(tracker, move)

def psmove_tracker_update_image(tracker):
    return _psmove.psmove_tracker_update_image(tracker)

def psmove_tracker_update(tracker, move):
    return _psmove.psmove_tracker_update(tracker, move)

def psmove_tracker_annotate(tracker):
    return _psmove.psmove_tracker_annotate(tracker)

def psmove_tracker_get_frame(tracker):
    return _psmove.psmove_tracker_get_frame(tracker)

def psmove_tracker_get_image(tracker):
    return _psmove.psmove_tracker_get_image(tracker)

def psmove_tracker_get_position(tracker, move, x, y, radius):
    return _psmove.psmove_tracker_get_position(tracker, move, x, y, radius)

def psmove_tracker_get_size(tracker, width, height):
    return _psmove.psmove_tracker_get_size(tracker, width, height)

def psmove_tracker_distance_from_radius(tracker, radius):
    return _psmove.psmove_tracker_distance_from_radius(tracker, radius)

def psmove_tracker_set_distance_parameters(tracker, height, center, hwhm, shape):
    return _psmove.psmove_tracker_set_distance_parameters(tracker, height, center, hwhm, shape)

def psmove_tracker_free(tracker):
    return _psmove.psmove_tracker_free(tracker)
PSEYE_FOV_BLUE_DOT = _psmove.PSEYE_FOV_BLUE_DOT
PSEYE_FOV_RED_DOT = _psmove.PSEYE_FOV_RED_DOT
class PSMoveMatrix4x4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m = property(_psmove.PSMoveMatrix4x4_m_get, _psmove.PSMoveMatrix4x4_m_set)

    def at(self, i):
        return _psmove.PSMoveMatrix4x4_at(self, i)

    def __init__(self):
        _psmove.PSMoveMatrix4x4_swiginit(self, _psmove.new_PSMoveMatrix4x4())
    __swig_destroy__ = _psmove.delete_PSMoveMatrix4x4

# Register PSMoveMatrix4x4 in _psmove:
_psmove.PSMoveMatrix4x4_swigregister(PSMoveMatrix4x4)


def psmove_fusion_new(tracker, z_near, z_far):
    return _psmove.psmove_fusion_new(tracker, z_near, z_far)

def psmove_fusion_get_projection_matrix(fusion):
    return _psmove.psmove_fusion_get_projection_matrix(fusion)

def psmove_fusion_get_modelview_matrix(fusion, move):
    return _psmove.psmove_fusion_get_modelview_matrix(fusion, move)

def psmove_fusion_get_position(fusion, move, x, y, z):
    return _psmove.psmove_fusion_get_position(fusion, move, x, y, z)

def psmove_fusion_free(fusion):
    return _psmove.psmove_fusion_free(fusion)
class PSMoveTracker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimming = property(_psmove.PSMoveTracker_dimming_get, _psmove.PSMoveTracker_dimming_set)
    exposure = property(_psmove.PSMoveTracker_exposure_get, _psmove.PSMoveTracker_exposure_set)

    def __init__(self, *args):
        _psmove.PSMoveTracker_swiginit(self, _psmove.new_PSMoveTracker(*args))

    def enable(self, move):
        return _psmove.PSMoveTracker_enable(self, move)

    def enable_with_color(self, move, r, g, b):
        return _psmove.PSMoveTracker_enable_with_color(self, move, r, g, b)

    def annotate(self):
        return _psmove.PSMoveTracker_annotate(self)

    def disable(self, move):
        return _psmove.PSMoveTracker_disable(self, move)

    def set_auto_update_leds(self, move, auto_update_leds):
        return _psmove.PSMoveTracker_set_auto_update_leds(self, move, auto_update_leds)

    def get_auto_update_leds(self, move):
        return _psmove.PSMoveTracker_get_auto_update_leds(self, move)

    def get_color(self, move):
        return _psmove.PSMoveTracker_get_color(self, move)

    def get_camera_color(self, move):
        return _psmove.PSMoveTracker_get_camera_color(self, move)

    def set_camera_color(self, move, r, g, b):
        return _psmove.PSMoveTracker_set_camera_color(self, move, r, g, b)

    def enable_deinterlace(self, enabled):
        return _psmove.PSMoveTracker_enable_deinterlace(self, enabled)

    def set_mirror(self, enabled):
        return _psmove.PSMoveTracker_set_mirror(self, enabled)

    def get_mirror(self):
        return _psmove.PSMoveTracker_get_mirror(self)

    def get_status(self, move):
        return _psmove.PSMoveTracker_get_status(self, move)

    def update_image(self):
        return _psmove.PSMoveTracker_update_image(self)

    def update(self, *args):
        return _psmove.PSMoveTracker_update(self, *args)

    def get_image(self):
        return _psmove.PSMoveTracker_get_image(self)

    def get_position(self, move):
        return _psmove.PSMoveTracker_get_position(self, move)

    def get_size(self):
        return _psmove.PSMoveTracker_get_size(self)

    def distance_from_radius(self, radius):
        return _psmove.PSMoveTracker_distance_from_radius(self, radius)

    def set_distance_parameters(self, height, center, hwhm, shape):
        return _psmove.PSMoveTracker_set_distance_parameters(self, height, center, hwhm, shape)
    __swig_destroy__ = _psmove.delete_PSMoveTracker

# Register PSMoveTracker in _psmove:
_psmove.PSMoveTracker_swigregister(PSMoveTracker)

class PSMoveFusion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, tracker, z_near, z_far):
        _psmove.PSMoveFusion_swiginit(self, _psmove.new_PSMoveFusion(tracker, z_near, z_far))
    __swig_destroy__ = _psmove.delete_PSMoveFusion

    def get_position(self, move):
        return _psmove.PSMoveFusion_get_position(self, move)

    def get_projection_matrix(self):
        return _psmove.PSMoveFusion_get_projection_matrix(self)

    def get_modelview_matrix(self, move):
        return _psmove.PSMoveFusion_get_modelview_matrix(self, move)

# Register PSMoveFusion in _psmove:
_psmove.PSMoveFusion_swigregister(PSMoveFusion)


def init(version):
    return _psmove.init(version)

def set_remote_config(config):
    return _psmove.set_remote_config(config)

def count_connected():
    return _psmove.count_connected()

def reinit():
    return _psmove.reinit()


